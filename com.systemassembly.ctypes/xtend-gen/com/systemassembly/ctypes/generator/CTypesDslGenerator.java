/**
 * generated by Xtext 2.18.0.M3
 */
package com.systemassembly.ctypes.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import com.systemassembly.ctypes.cTypesDsl.DataTypeDef;
import com.systemassembly.ctypes.cTypesDsl.StructDef;
import com.systemassembly.ctypes.cTypesDsl.StructField;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Pair;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CTypesDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final String modelName = resource.getURI().trimFileExtension().lastSegment();
    final String header_types_filename = (modelName + ".h");
    fsa.generateFile(header_types_filename, 
      this.gen_header_types_file(resource));
  }
  
  public CharSequence gen_header_types_file(final Resource resource) {
    CharSequence _xblockexpression = null;
    {
      final List<DataTypeDef> dataTypes = IteratorExtensions.<DataTypeDef>toList(Iterators.<DataTypeDef>filter(resource.getAllContents(), DataTypeDef.class));
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("#pragma once");
      _builder.newLine();
      _builder.newLine();
      _builder.append("#include <stdint.h>");
      _builder.newLine();
      String _type_includes = this.type_includes(resource);
      _builder.append(_type_includes);
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      {
        boolean _hasElements = false;
        for(final DataTypeDef dataType : dataTypes) {
          if (!_hasElements) {
            _hasElements = true;
          } else {
            _builder.appendImmediate("\n", "");
          }
          {
            if ((dataType instanceof StructDef)) {
              _builder.append("struct ");
              String _name = ((StructDef)dataType).getName();
              _builder.append(_name);
              _builder.append(" {");
              _builder.newLineIfNotEmpty();
              {
                EList<StructField> _fields = ((StructDef)dataType).getFields();
                for(final StructField field : _fields) {
                  _builder.append("\t");
                  String _typedecl = this.typedecl(field);
                  _builder.append(_typedecl, "\t");
                  String _arraydecl = this.arraydecl(field);
                  _builder.append(_arraydecl, "\t");
                  _builder.append(" ");
                  String _name_1 = field.getName();
                  _builder.append(_name_1, "\t");
                  _builder.append(";");
                  _builder.newLineIfNotEmpty();
                }
              }
              _builder.append("};");
              _builder.newLine();
              _builder.append("typedef struct ");
              String _name_2 = ((StructDef)dataType).getName();
              _builder.append(_name_2);
              _builder.append(" ");
              String _name_3 = ((StructDef)dataType).getName();
              _builder.append(_name_3);
              _builder.append("_t;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public String type_includes(final Resource resource) {
    HashSet<Object> includes = CollectionLiterals.<Object>newHashSet();
    final List<DataTypeDef> derivedTypes = IteratorExtensions.<DataTypeDef>toList(Iterators.<DataTypeDef>filter(resource.getAllContents(), DataTypeDef.class));
    final List<StructDef> structTypes = IterableExtensions.<StructDef>toList(Iterables.<StructDef>filter(derivedTypes, StructDef.class));
    for (final StructDef structType : structTypes) {
      EList<StructField> _fields = structType.getFields();
      for (final StructField field : _fields) {
        if (((field.getDerivedType() != null) && (field.getDerivedType() instanceof StructDef))) {
          final Resource foreignResource = field.getDerivedType().eContainer().eResource();
          boolean _notEquals = (!Objects.equal(foreignResource, resource));
          if (_notEquals) {
            String _lastSegment = foreignResource.getURI().trimFileExtension().lastSegment();
            String _plus = ("#include \"" + _lastSegment);
            String _plus_1 = (_plus + ".h\"");
            includes.add(_plus_1);
          }
        }
      }
    }
    return IterableExtensions.join(includes, "\n");
  }
  
  public String typedecl(final StructField field) {
    try {
      String _basicType = field.getBasicType();
      boolean _tripleNotEquals = (_basicType != null);
      if (_tripleNotEquals) {
        return this.c_types_map.get(field.getBasicType());
      } else {
        if (((field.getDerivedType() != null) && (field.getDerivedType() instanceof StructDef))) {
          DataTypeDef _derivedType = field.getDerivedType();
          String _name = ((StructDef) _derivedType).getName();
          return (_name + "_t");
        } else {
          String _name_1 = field.getName();
          String _plus = ("Unsupported field type of " + _name_1);
          throw new Exception(_plus);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public String arraydecl(final StructField field) {
    int _arraySize = field.getArraySize();
    boolean _greaterThan = (_arraySize > 0);
    if (_greaterThan) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("[");
      int _arraySize_1 = field.getArraySize();
      _builder.append(_arraySize_1);
      _builder.append("]");
      return _builder.toString();
    }
    StringConcatenation _builder_1 = new StringConcatenation();
    return _builder_1.toString();
  }
  
  private final Map<String, String> c_types_map = Collections.<String, String>unmodifiableMap(CollectionLiterals.<String, String>newHashMap(Pair.<String, String>of("int8", "int8_t"), Pair.<String, String>of("int16", "int16_t"), Pair.<String, String>of("int32", "int32_t"), Pair.<String, String>of("int64", "int64_t"), Pair.<String, String>of("uint8", "uint8_t"), Pair.<String, String>of("uint16", "uint16_t"), Pair.<String, String>of("uint32", "uint32_t"), Pair.<String, String>of("uint64", "uint64_t"), Pair.<String, String>of("float", "float"), Pair.<String, String>of("double", "double")));
}
