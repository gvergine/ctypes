/*
 * generated by Xtext 2.18.0.M3
 */
package com.systemassembly.ctypes.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CTypesDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.systemassembly.ctypes.CTypesDsl.Model");
		private final Assignment cDataTypeDefinitionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDataTypeDefinitionsDataTypeDefParserRuleCall_0 = (RuleCall)cDataTypeDefinitionsAssignment.eContents().get(0);
		
		//Model:
		//	dataTypeDefinitions+=DataTypeDef*;
		@Override public ParserRule getRule() { return rule; }
		
		//dataTypeDefinitions+=DataTypeDef*
		public Assignment getDataTypeDefinitionsAssignment() { return cDataTypeDefinitionsAssignment; }
		
		//DataTypeDef
		public RuleCall getDataTypeDefinitionsDataTypeDefParserRuleCall_0() { return cDataTypeDefinitionsDataTypeDefParserRuleCall_0; }
	}
	public class DataTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.systemassembly.ctypes.CTypesDsl.DataTypeDef");
		private final RuleCall cStructDefParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DataTypeDef:
		//	StructDef;
		@Override public ParserRule getRule() { return rule; }
		
		//StructDef
		public RuleCall getStructDefParserRuleCall() { return cStructDefParserRuleCall; }
	}
	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.systemassembly.ctypes.CTypesDsl.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInt8Keyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInt16Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInt32Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInt64Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUint8Keyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUint16Keyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cUint32Keyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cUint64Keyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cFloatKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDoubleKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//BasicType:
		//	'int8' | 'int16' | 'int32' | 'int64' | 'uint8' | 'uint16' | 'uint32' | 'uint64' | 'float' | 'double';
		@Override public ParserRule getRule() { return rule; }
		
		//'int8' | 'int16' | 'int32' | 'int64' | 'uint8' | 'uint16' | 'uint32' | 'uint64' | 'float' | 'double'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int8'
		public Keyword getInt8Keyword_0() { return cInt8Keyword_0; }
		
		//'int16'
		public Keyword getInt16Keyword_1() { return cInt16Keyword_1; }
		
		//'int32'
		public Keyword getInt32Keyword_2() { return cInt32Keyword_2; }
		
		//'int64'
		public Keyword getInt64Keyword_3() { return cInt64Keyword_3; }
		
		//'uint8'
		public Keyword getUint8Keyword_4() { return cUint8Keyword_4; }
		
		//'uint16'
		public Keyword getUint16Keyword_5() { return cUint16Keyword_5; }
		
		//'uint32'
		public Keyword getUint32Keyword_6() { return cUint32Keyword_6; }
		
		//'uint64'
		public Keyword getUint64Keyword_7() { return cUint64Keyword_7; }
		
		//'float'
		public Keyword getFloatKeyword_8() { return cFloatKeyword_8; }
		
		//'double'
		public Keyword getDoubleKeyword_9() { return cDoubleKeyword_9; }
	}
	public class StructDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.systemassembly.ctypes.CTypesDsl.StructDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsStructFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StructDef:
		//	'struct' name=ID '{'
		//	fields+=StructField*
		//	'}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'struct' name=ID '{' fields+=StructField* '}' ';'
		public Group getGroup() { return cGroup; }
		
		//'struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fields+=StructField*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//StructField
		public RuleCall getFieldsStructFieldParserRuleCall_3_0() { return cFieldsStructFieldParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class StructFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.systemassembly.ctypes.CTypesDsl.StructField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cBasicTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cBasicTypeBasicTypeParserRuleCall_0_0_0 = (RuleCall)cBasicTypeAssignment_0_0.eContents().get(0);
		private final Assignment cDerivedTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cDerivedTypeDataTypeDefCrossReference_0_1_0 = (CrossReference)cDerivedTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cDerivedTypeDataTypeDefIDTerminalRuleCall_0_1_0_1 = (RuleCall)cDerivedTypeDataTypeDefCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArraySizeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArraySizeINTTerminalRuleCall_1_1_0 = (RuleCall)cArraySizeAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StructField:
		//	(basicType=BasicType | derivedType=[DataTypeDef]) ('[' arraySize=INT ']')? name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(basicType=BasicType | derivedType=[DataTypeDef]) ('[' arraySize=INT ']')? name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//basicType=BasicType | derivedType=[DataTypeDef]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//basicType=BasicType
		public Assignment getBasicTypeAssignment_0_0() { return cBasicTypeAssignment_0_0; }
		
		//BasicType
		public RuleCall getBasicTypeBasicTypeParserRuleCall_0_0_0() { return cBasicTypeBasicTypeParserRuleCall_0_0_0; }
		
		//derivedType=[DataTypeDef]
		public Assignment getDerivedTypeAssignment_0_1() { return cDerivedTypeAssignment_0_1; }
		
		//[DataTypeDef]
		public CrossReference getDerivedTypeDataTypeDefCrossReference_0_1_0() { return cDerivedTypeDataTypeDefCrossReference_0_1_0; }
		
		//ID
		public RuleCall getDerivedTypeDataTypeDefIDTerminalRuleCall_0_1_0_1() { return cDerivedTypeDataTypeDefIDTerminalRuleCall_0_1_0_1; }
		
		//('[' arraySize=INT ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//arraySize=INT
		public Assignment getArraySizeAssignment_1_1() { return cArraySizeAssignment_1_1; }
		
		//INT
		public RuleCall getArraySizeINTTerminalRuleCall_1_1_0() { return cArraySizeINTTerminalRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	
	private final ModelElements pModel;
	private final DataTypeDefElements pDataTypeDef;
	private final BasicTypeElements pBasicType;
	private final StructDefElements pStructDef;
	private final StructFieldElements pStructField;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CTypesDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDataTypeDef = new DataTypeDefElements();
		this.pBasicType = new BasicTypeElements();
		this.pStructDef = new StructDefElements();
		this.pStructField = new StructFieldElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.systemassembly.ctypes.CTypesDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	dataTypeDefinitions+=DataTypeDef*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//DataTypeDef:
	//	StructDef;
	public DataTypeDefElements getDataTypeDefAccess() {
		return pDataTypeDef;
	}
	
	public ParserRule getDataTypeDefRule() {
		return getDataTypeDefAccess().getRule();
	}
	
	//BasicType:
	//	'int8' | 'int16' | 'int32' | 'int64' | 'uint8' | 'uint16' | 'uint32' | 'uint64' | 'float' | 'double';
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//StructDef:
	//	'struct' name=ID '{'
	//	fields+=StructField*
	//	'}' ';';
	public StructDefElements getStructDefAccess() {
		return pStructDef;
	}
	
	public ParserRule getStructDefRule() {
		return getStructDefAccess().getRule();
	}
	
	//StructField:
	//	(basicType=BasicType | derivedType=[DataTypeDef]) ('[' arraySize=INT ']')? name=ID ';';
	public StructFieldElements getStructFieldAccess() {
		return pStructField;
	}
	
	public ParserRule getStructFieldRule() {
		return getStructFieldAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
