/*
 * generated by Xtext 2.18.0.M3
 */
grammar InternalCTypesDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.systemassembly.ctypes.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.systemassembly.ctypes.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.systemassembly.ctypes.services.CTypesDslGrammarAccess;

}

@parser::members {

 	private CTypesDslGrammarAccess grammarAccess;

    public InternalCTypesDslParser(TokenStream input, CTypesDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected CTypesDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getDataTypeDefinitionsDataTypeDefParserRuleCall_0());
			}
			lv_dataTypeDefinitions_0_0=ruleDataTypeDef
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"dataTypeDefinitions",
					lv_dataTypeDefinitions_0_0,
					"com.systemassembly.ctypes.CTypesDsl.DataTypeDef");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleDataTypeDef
entryRuleDataTypeDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeDefRule()); }
	iv_ruleDataTypeDef=ruleDataTypeDef
	{ $current=$iv_ruleDataTypeDef.current; }
	EOF;

// Rule DataTypeDef
ruleDataTypeDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getDataTypeDefAccess().getStructDefParserRuleCall());
	}
	this_StructDef_0=ruleStructDef
	{
		$current = $this_StructDef_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleBasicType
entryRuleBasicType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	iv_ruleBasicType=ruleBasicType
	{ $current=$iv_ruleBasicType.current.getText(); }
	EOF;

// Rule BasicType
ruleBasicType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='int8'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getInt8Keyword_0());
		}
		    |
		kw='int16'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getInt16Keyword_1());
		}
		    |
		kw='int32'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getInt32Keyword_2());
		}
		    |
		kw='int64'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getInt64Keyword_3());
		}
		    |
		kw='uint8'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getUint8Keyword_4());
		}
		    |
		kw='uint16'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getUint16Keyword_5());
		}
		    |
		kw='uint32'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getUint32Keyword_6());
		}
		    |
		kw='uint64'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getUint64Keyword_7());
		}
		    |
		kw='float'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getFloatKeyword_8());
		}
		    |
		kw='double'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypeAccess().getDoubleKeyword_9());
		}
	)
;

// Entry rule entryRuleStructDef
entryRuleStructDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructDefRule()); }
	iv_ruleStructDef=ruleStructDef
	{ $current=$iv_ruleStructDef.current; }
	EOF;

// Rule StructDef
ruleStructDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='struct'
		{
			newLeafNode(otherlv_0, grammarAccess.getStructDefAccess().getStructKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStructDefAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStructDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getStructDefAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStructDefAccess().getFieldsStructFieldParserRuleCall_3_0());
				}
				lv_fields_3_0=ruleStructField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructDefRule());
					}
					add(
						$current,
						"fields",
						lv_fields_3_0,
						"com.systemassembly.ctypes.CTypesDsl.StructField");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getStructDefAccess().getRightCurlyBracketKeyword_4());
		}
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getStructDefAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleStructField
entryRuleStructField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructFieldRule()); }
	iv_ruleStructField=ruleStructField
	{ $current=$iv_ruleStructField.current; }
	EOF;

// Rule StructField
ruleStructField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStructFieldAccess().getBasicTypeBasicTypeParserRuleCall_0_0_0());
					}
					lv_basicType_0_0=ruleBasicType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructFieldRule());
						}
						set(
							$current,
							"basicType",
							lv_basicType_0_0,
							"com.systemassembly.ctypes.CTypesDsl.BasicType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStructFieldRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getStructFieldAccess().getDerivedTypeDataTypeDefCrossReference_0_1_0());
					}
				)
			)
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getStructFieldAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					lv_arraySize_3_0=RULE_INT
					{
						newLeafNode(lv_arraySize_3_0, grammarAccess.getStructFieldAccess().getArraySizeINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStructFieldRule());
						}
						setWithLastConsumed(
							$current,
							"arraySize",
							lv_arraySize_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getStructFieldAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getStructFieldAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStructFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getStructFieldAccess().getSemicolonKeyword_3());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
