/*
 * generated by Xtext 2.18.0.M3
 */
package com.systemassembly.ctypes.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.systemassembly.ctypes.ide.contentassist.antlr.internal.InternalCTypesDslParser;
import com.systemassembly.ctypes.services.CTypesDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CTypesDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CTypesDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CTypesDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBasicTypeAccess().getAlternatives(), "rule__BasicType__Alternatives");
			builder.put(grammarAccess.getStructFieldAccess().getAlternatives_0(), "rule__StructField__Alternatives_0");
			builder.put(grammarAccess.getStructDefAccess().getGroup(), "rule__StructDef__Group__0");
			builder.put(grammarAccess.getStructFieldAccess().getGroup(), "rule__StructField__Group__0");
			builder.put(grammarAccess.getStructFieldAccess().getGroup_1(), "rule__StructField__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getDataTypeDefinitionsAssignment(), "rule__Model__DataTypeDefinitionsAssignment");
			builder.put(grammarAccess.getStructDefAccess().getNameAssignment_1(), "rule__StructDef__NameAssignment_1");
			builder.put(grammarAccess.getStructDefAccess().getFieldsAssignment_3(), "rule__StructDef__FieldsAssignment_3");
			builder.put(grammarAccess.getStructFieldAccess().getBasicTypeAssignment_0_0(), "rule__StructField__BasicTypeAssignment_0_0");
			builder.put(grammarAccess.getStructFieldAccess().getDerivedTypeAssignment_0_1(), "rule__StructField__DerivedTypeAssignment_0_1");
			builder.put(grammarAccess.getStructFieldAccess().getArraySizeAssignment_1_1(), "rule__StructField__ArraySizeAssignment_1_1");
			builder.put(grammarAccess.getStructFieldAccess().getNameAssignment_2(), "rule__StructField__NameAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CTypesDslGrammarAccess grammarAccess;

	@Override
	protected InternalCTypesDslParser createParser() {
		InternalCTypesDslParser result = new InternalCTypesDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CTypesDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CTypesDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
