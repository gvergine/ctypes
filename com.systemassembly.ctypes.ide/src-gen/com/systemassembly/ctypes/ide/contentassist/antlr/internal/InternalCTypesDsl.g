/*
 * generated by Xtext 2.18.0.M3
 */
grammar InternalCTypesDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.systemassembly.ctypes.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.systemassembly.ctypes.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.systemassembly.ctypes.services.CTypesDslGrammarAccess;

}
@parser::members {
	private CTypesDslGrammarAccess grammarAccess;

	public void setGrammarAccess(CTypesDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getDataTypeDefinitionsAssignment()); }
		(rule__Model__DataTypeDefinitionsAssignment)*
		{ after(grammarAccess.getModelAccess().getDataTypeDefinitionsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataTypeDef
entryRuleDataTypeDef
:
{ before(grammarAccess.getDataTypeDefRule()); }
	 ruleDataTypeDef
{ after(grammarAccess.getDataTypeDefRule()); } 
	 EOF 
;

// Rule DataTypeDef
ruleDataTypeDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataTypeDefAccess().getStructDefParserRuleCall()); }
		ruleStructDef
		{ after(grammarAccess.getDataTypeDefAccess().getStructDefParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBasicType
entryRuleBasicType
:
{ before(grammarAccess.getBasicTypeRule()); }
	 ruleBasicType
{ after(grammarAccess.getBasicTypeRule()); } 
	 EOF 
;

// Rule BasicType
ruleBasicType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasicTypeAccess().getAlternatives()); }
		(rule__BasicType__Alternatives)
		{ after(grammarAccess.getBasicTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStructDef
entryRuleStructDef
:
{ before(grammarAccess.getStructDefRule()); }
	 ruleStructDef
{ after(grammarAccess.getStructDefRule()); } 
	 EOF 
;

// Rule StructDef
ruleStructDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStructDefAccess().getGroup()); }
		(rule__StructDef__Group__0)
		{ after(grammarAccess.getStructDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStructField
entryRuleStructField
:
{ before(grammarAccess.getStructFieldRule()); }
	 ruleStructField
{ after(grammarAccess.getStructFieldRule()); } 
	 EOF 
;

// Rule StructField
ruleStructField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStructFieldAccess().getGroup()); }
		(rule__StructField__Group__0)
		{ after(grammarAccess.getStructFieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicTypeAccess().getInt8Keyword_0()); }
		'int8'
		{ after(grammarAccess.getBasicTypeAccess().getInt8Keyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getInt16Keyword_1()); }
		'int16'
		{ after(grammarAccess.getBasicTypeAccess().getInt16Keyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getInt32Keyword_2()); }
		'int32'
		{ after(grammarAccess.getBasicTypeAccess().getInt32Keyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getInt64Keyword_3()); }
		'int64'
		{ after(grammarAccess.getBasicTypeAccess().getInt64Keyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getUint8Keyword_4()); }
		'uint8'
		{ after(grammarAccess.getBasicTypeAccess().getUint8Keyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getUint16Keyword_5()); }
		'uint16'
		{ after(grammarAccess.getBasicTypeAccess().getUint16Keyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getUint32Keyword_6()); }
		'uint32'
		{ after(grammarAccess.getBasicTypeAccess().getUint32Keyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getUint64Keyword_7()); }
		'uint64'
		{ after(grammarAccess.getBasicTypeAccess().getUint64Keyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getFloatKeyword_8()); }
		'float'
		{ after(grammarAccess.getBasicTypeAccess().getFloatKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getDoubleKeyword_9()); }
		'double'
		{ after(grammarAccess.getBasicTypeAccess().getDoubleKeyword_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructFieldAccess().getBasicTypeAssignment_0_0()); }
		(rule__StructField__BasicTypeAssignment_0_0)
		{ after(grammarAccess.getStructFieldAccess().getBasicTypeAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStructFieldAccess().getDerivedTypeAssignment_0_1()); }
		(rule__StructField__DerivedTypeAssignment_0_1)
		{ after(grammarAccess.getStructFieldAccess().getDerivedTypeAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructDef__Group__0__Impl
	rule__StructDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructDefAccess().getStructKeyword_0()); }
	'struct'
	{ after(grammarAccess.getStructDefAccess().getStructKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructDef__Group__1__Impl
	rule__StructDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructDefAccess().getNameAssignment_1()); }
	(rule__StructDef__NameAssignment_1)
	{ after(grammarAccess.getStructDefAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructDef__Group__2__Impl
	rule__StructDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructDefAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getStructDefAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructDef__Group__3__Impl
	rule__StructDef__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructDefAccess().getFieldsAssignment_3()); }
	(rule__StructDef__FieldsAssignment_3)*
	{ after(grammarAccess.getStructDefAccess().getFieldsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructDef__Group__4__Impl
	rule__StructDef__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructDefAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getStructDefAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructDef__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructDefAccess().getSemicolonKeyword_5()); }
	';'
	{ after(grammarAccess.getStructDefAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StructField__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructField__Group__0__Impl
	rule__StructField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructFieldAccess().getAlternatives_0()); }
	(rule__StructField__Alternatives_0)
	{ after(grammarAccess.getStructFieldAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructField__Group__1__Impl
	rule__StructField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructFieldAccess().getGroup_1()); }
	(rule__StructField__Group_1__0)?
	{ after(grammarAccess.getStructFieldAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructField__Group__2__Impl
	rule__StructField__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructFieldAccess().getNameAssignment_2()); }
	(rule__StructField__NameAssignment_2)
	{ after(grammarAccess.getStructFieldAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructField__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructFieldAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getStructFieldAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StructField__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructField__Group_1__0__Impl
	rule__StructField__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructFieldAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getStructFieldAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructField__Group_1__1__Impl
	rule__StructField__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructFieldAccess().getArraySizeAssignment_1_1()); }
	(rule__StructField__ArraySizeAssignment_1_1)
	{ after(grammarAccess.getStructFieldAccess().getArraySizeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructField__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructFieldAccess().getRightSquareBracketKeyword_1_2()); }
	']'
	{ after(grammarAccess.getStructFieldAccess().getRightSquareBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__DataTypeDefinitionsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getDataTypeDefinitionsDataTypeDefParserRuleCall_0()); }
		ruleDataTypeDef
		{ after(grammarAccess.getModelAccess().getDataTypeDefinitionsDataTypeDefParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructDefAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStructDefAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructDef__FieldsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructDefAccess().getFieldsStructFieldParserRuleCall_3_0()); }
		ruleStructField
		{ after(grammarAccess.getStructDefAccess().getFieldsStructFieldParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__BasicTypeAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructFieldAccess().getBasicTypeBasicTypeParserRuleCall_0_0_0()); }
		ruleBasicType
		{ after(grammarAccess.getStructFieldAccess().getBasicTypeBasicTypeParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__DerivedTypeAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructFieldAccess().getDerivedTypeDataTypeDefCrossReference_0_1_0()); }
		(
			{ before(grammarAccess.getStructFieldAccess().getDerivedTypeDataTypeDefIDTerminalRuleCall_0_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getStructFieldAccess().getDerivedTypeDataTypeDefIDTerminalRuleCall_0_1_0_1()); }
		)
		{ after(grammarAccess.getStructFieldAccess().getDerivedTypeDataTypeDefCrossReference_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__ArraySizeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructFieldAccess().getArraySizeINTTerminalRuleCall_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getStructFieldAccess().getArraySizeINTTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructField__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStructFieldAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getStructFieldAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
